<?xml version="1.0"?>
<!DOCTYPE hibernate-mapping PUBLIC
          "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
          "http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd">
<!-- 
 * This file is part of the CSNetwork Services (CSNS) project.
 * 
 * Copyright 2012, Chengyu Sun (csun@calstatela.edu).
 * 
 * CSNS is free software: you can redistribute it and/or modify it under the
 * terms of the GNU Affero General Public License as published by the Free
 * Software Foundation, either version 3 of the License, or (at your option)
 * any later version.
 * 
 * CSNS is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for
 * more details.
 * 
 * You should have received a copy of the GNU Affero General Public License
 * along with CSNS. If not, see http://www.gnu.org/licenses/agpl.html.
 -->
<hibernate-mapping>

    <sql-query name="course.search">
        <return class="csns.model.academics.Course" />
<![CDATA[
select * from courses where obsolete = 'f' and
    (code like upper(:term) || '%' or plainto_tsquery(:term) @@ tsv)
    order by code asc
]]>
    </sql-query>

    <sql-query name="online.assignment.search">
        <return class="csns.model.academics.OnlineAssignment" />
<![CDATA[
select a.* from assignments a, sections s, section_instructors i
    where a.assignment_type = 'ONLINE' and plainto_tsquery(:term) @@ a.tsv
    and a.section_id = s.id and s.id = i.section_id
    and i.instructor_id = :instructorId
    order by ts_rank(tsv, plainto_tsquery(:term), 16|32) desc
]]>
    </sql-query>

    <sql-query name="subscribed.system.forums">
        <return class="csns.model.forum.Forum" />
<![CDATA[
select f.* from users u, subscriptions s, forums f
    where u.id = :userId and u.id = s.subscriber_id
    and s.subscribable_type = 'FM' and s.subscribable_id = f.id
    and f.department_id is null and f.course_id is null
    order by f.name asc
]]>
    </sql-query>

    <sql-query name="subscribed.department.forums">
        <return class="csns.model.forum.Forum" />
<![CDATA[
select f.* from users u, subscriptions s, forums f
    where u.id = :userId and u.id = s.subscriber_id
    and s.subscribable_type = 'FM' and s.subscribable_id = f.id
    and f.department_id is not null
    order by f.name asc
]]>
    </sql-query>

    <sql-query name="subscribed.course.forums">
        <return class="csns.model.forum.Forum" />
<![CDATA[
select f.* from users u, subscriptions s, forums f
    where u.id = :userId and u.id = s.subscriber_id
    and s.subscribable_type = 'FM' and s.subscribable_id = f.id
    and f.course_id is not null
    order by f.name asc
]]>
    </sql-query>

    <sql-query name="forum.search">
        <return class="csns.model.forum.Forum" />
<![CDATA[
select f.* from forums f, plainto_tsquery(:term) query
    where query @@ f.tsv order by ts_rank(tsv, query, 16|32) desc
]]>
    </sql-query>

    <sql-query name="forum.post.search">
        <return class="csns.model.forum.Post" />
<![CDATA[
select id, date, author_id, topic_id, edited_by, edit_date,
        ts_headline( subject, query ) as subject,
        ts_headline( content, query, 'MaxWords=200' ) as content
    from (select p.*, query
        from forum_posts p, forum_topics t, plainto_tsquery(:term) query
        where p.topic_id = t.id and t.deleted = 'f' and query @@ tsv and t.forum_id = :forumId
        order by ts_rank(tsv, query, 16|32) desc) as results
]]>
    </sql-query>

</hibernate-mapping>
